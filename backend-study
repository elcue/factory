backend-study

면접 키워드 공부
- 지금까지 내가 질문 받았던 애들 정리

* 대칭키, 공개키(비대칭키)
> 대칭키는 암복호화에 사용하는 키가 동일한 암호화 방식
  AES, SEED 암호화 등이 있다. 속도가 빠름.
> 비대칭키는 암복호화에 사용하는 키가 서로 다른 암호화 방식
  RSA방식. 키 두개 생성, 공개키로 암호화, 개인키로 복호화.

* 암호화 뭐 써봤나?
 > SEED 암호화를 사용하여 사용자 별로 키를 관리하고 있습니다.

* XSS
 > 사이트 간의 스크립팅 웹취약점

* CORS 란?
 > cross origin resource sharing의 약자로, 브라우저에서 다른 출처의 리소스를 공유하는 방법.

* PK 유니크키 차이
 >PK는 테이블의 식별자. 테이블당 무조건 하나만 있어야함.
 > 유니크키는 각 컬럼마다 설정 가능하며, 중복을 제어함.

* PK 설정하는 방법
Constraint key primary key( key1)
* 인덱스 설정
 Create index indexkey ON table(key)
* ibatis $, #
> #은 소프트파싱, $는 하드파싱
 > #은 해당 값이 큰따옴표로 쌓이고, $는 큰따옴표 없이 실행됨
 > ibatis는 1.4이상 가능, mybatis는 1.5이상 가능.ㅋ

* 정규화, 비정규화
 > 정규화 : 중복을 최소화 하도록 설계
   많은 조인이 필요.
 > 비정규화 : 읽는 시간을 최적화 하도록 설계
  
* 디비 트랜잭션 ACID 설명
 > 원자성(atomicity) : All or nothing으로 작업 부분실행, 중단되지 않는 것을 보장
 > 일관성(Consistency) : 완료 후 일관적인 DB 상태를 유지함. 
 > 격리성(Isolation) : 트랜잭션 수행 시 다른 트랜잭션이 끼어들지 못함. 간섭 X
 > 지속성(Durability) : 성공된 트랜잭션은 영원히 반영. Commit 시 영원히 반영

* OSI 7계층 설명, TCP IP는 어디에 있나?
 > 1계층 물리 > 통신 테이블.
 > 2계층 데이터 > MAC 어드레스를 가지고 통신
 > 3계층 네트워크 > IP주소를 가지고 라두팅, 포워딩
 > 4계층 전송 > TCP(3way), UDP 등으로 통신
 > 5계층 세션 > 전송에서 네트워크 연결이 되었으면 세션 생성되었다고 하고, 세션의 송수신 방식에 대해서 결정함. 인증, 허가 등.. Duplex, hal-duplex, full duplex 방식이 있음
 > 6계층 표현 > 응용계층에서 메시지를 볼 수 있도록 진행하는 사전 작업. MIME이 표현계층에서 작동
 > 7계층 응용 > 네트워크 기능을 작동하는 모든 프로그램들은 응용 계층. HTTP, SMTP 등..

* TCP/IP 동작에 대해 설명
3way handshake 연결설정
SYN 통신 가능여부 -> SYN,ACK 통신 준비 알림 -> ACK 전송
4way handshaking
ACK, FIN 연결 종료 요청 -> ACK 확인보내고 통신 끝나길 대기, ACK, FIN 전송 -> ACK 전송


* dispatcher servlet 설명
 > HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아 적합한 컨트롤러에 위임해주는 프론트 컨트롤러. 
 클라이언트 요청을 dispatcher 서블릿이 받아서 요청을 위임할 컨트롤러를 찾고, 해당 핸들러 어댑터를 찾아 전달하여 핸들러 어댑터가 컨트롤러로 위임. 로직저리 후 반환.

* 데이터베이스 정규화 과정

* RDBMS 장단점
 > 데이터가 중복없이 저장될 수 있음. 정해진 스키마에 따라 데이터 저장

* JVM이란 무엇인가
> 클래스 로더를 통해 자바 애플리케이션을 읽어들여 실행하는 역할을 하는 것입니다. 메모리 관리, 가비지 켈렉션등을 수행합니다. JVM은 스택기반 가상머신입니다.
https://lisoft.tistory.com/20?category=978383

* WAS, WEBSERVER 차이
> web : 정적인 자원 저장 was : 동적인 자원 저장

* DB 인덱스란란? 좋은점은? 어떻게 사용? 어떻게 구현?
 > 데이터베이스 검색 속도를 향상시키기 위한 자료구조 입니다. 비트리, 키밸류 등의 형태로 사용할 수 있습니다. 추가작업과 저장공간이 필요합니다. 잘못사용하면 더 느려집니다. 
 사용하면 좋은 경우 : 큰 테이블, iud가 자주 발생하지 않는, join이 많은, 중복도 낮은.
해시테이블은 키맵이라 빠르긴 한데 equal 등호만 특화되어서 보통 b+트리를 씁니다.
B+트리는 링크드 리스트를 사용하여 검색합니다.

* http method 4가지에 대해.
>get, post, put, delete
Get은 조회, post는 데이터 처리 및 등록, put은 수정, delete는 삭제때 사용

* 동적 클래스로딩. 리플렉션이란?
> 런타임 시점에 클래스, 인터페이스 등을 호출하고 객체를 생성하고 변수 변경 등을 할 수 있는 방법

* 쿠키, 세션에 대해 설명
 > 쿠키 : 브라우저에 저장. ID 저장 등
 > 세션 : 서버에서 관리. 로그인 유지 시간 등.
 > 캐시 : 같은 웹페이지에 접속할떄 사용자 PC에서 로드. 서버 거치지 않음. 이미지 등

* 스프링 IOC, DI에 대해서
 > https://velog.io/@gillog/Spring-DIDependency-Injection

* 스프링과 스트러츠의 차이?
 > 스트러츠는 IOC 컨테이너 개념이 없다. 애노테이션을 사용한 주입방식을 사용할 수 없다.
 dispatcher sevlet도 없기 때문에 web.xml에서 servlet 설정을 전부다 해줘야한다. 
 라이브러리 등을 직접 받아서 넣어야한다. Pom.xml 등과 같이 선언하여 다운이 안됨.

- 인터넷에 있는 거 정리
* MVC 패턴에 대해 설명
> model, view, controller 형태로 이루어진 패턴입니다. 서블릿을 통해 controller로 요청이 들어오면 model에서 비즈니스 로직을 처리하고, 그 결과 값을 다시 controller로 전달해주어 view로 보여주는 패턴을 얘기합니다.

* 자바 컬렉션 종류와 특징에 대해 설명
> List, Set, Map 등이 있습니다.
List는 순서가 있고 데이터 중복이 가능합니다.
Stack, Vector, ArrayList, LinkedList가 있습니다.
Set은 순서가 없고 데이터 중복 불가합니다.
HashSet, TreeSet이 있습니다.
Map은 키,밸류 형태로 이루어져있고 키 중복 허용하지 않습니다.
HashMap, HashTable 

* 내가 남들보다 뛰어난 점
 > 회사 간편결제를 처음부터 끝까지 같이 만들면서 어떤식으로 간편결제 프로세스가 이루어지는지에 대해 남들보다 잘 알고 있는 것이 강점이라고 생각한다. 
* 정렬의 종류 및 특징을 설명
> 선택정렬, 삽입정렬, 퀵정렬 등이 있다.
 선택: 가장 작은 수를 선택한 후 i번째와 교환 반복
 삽입 : 작은수가 나올 때 까지 오른쪽이랑 변경
 퀵 : https://st-lab.tistory.com/250

* WEB 원리
> URL 입력 > 도메인 네임을 DNS 서버에서 검색 > DNS에 해당하는 IP를 찾아서 사용자가 입력한 URL과 함께 전달. HTTP 프로토콜을 사용하여 HTTP 요청 메시지 생성하고 TCP 프로토콜을 사용하여 인터넷을 거쳐 해당 IP 주소의 컴퓨터로 전송 > 도착한 HTTP 메시지는 HTTP 프로토콜을 사용하여 웹 URL 정보로 변환 > 웹 서버는 도착한 웹 페이지 URL 정보에 해당하는 데이터를 검색 > 검색된 웹 페이지 데이터를 다시 HTTP 프로토콜을 사용하여 HTTP 응답 메시지 생성 > HTTP 응답 메시지는 TCP를 거쳐서 원래 컴퓨터로 전송 > 도착한 HTTP 응답 메시지는 HTTP 프로토콜을 사용하여 웹 페이지 데이터로 변환 > 변환된 웹 페이지를 사용자가 봄

* WAS 동작 방식에 대해 설명
 > web서버의 클라이언트의 요청에 맞는 servlet을 메모리에 올린다. > web.xml에서 해당 servlet에 대한 정보를 찾아 thread 생성. Httpservlet request, response 객체 생성하여 WAS에 전달

* 객체지향 프로그래밍에 대해 설명
 > 현실세계를 프로그래밍으로 옮겨와 현실 세계의 사물을 객체로 보고 프로그래밍 하는 기법.
SRP 단일책임원칙 : 클래스는 단 하나의 목적을 가져야함.
OCP 개방 폐쇄원칙 : 클래스는 확장에 열려있고, 변경에 닫혀있어야함.
LSP 리스코프 치환원칙 : 상위타입의 객체를 하위 타입으로 바꾸어도 프로그램은 일관되게 동작되어야함
ISP 인터페이스 분리 원칙 : 클라이언트는 이용하지 않는 메소드에 의존하지 않도록 인터페이스를 분리야함.
DIP 의존 역전 법칙 : 클라이언트는 추상화에 의존해야하며, 구체화에 의존해선 안된다.

* interface와 abstract에 대해 설명
> 다중이 되고 안되고 정도..

* 프로세스랑 스레드의 차이점
> 프로세스는 프로그램에 메모리를 할당받아 실행되는 프로그램. 스레드는 그 프로세스한테 자원을 할당 받아 실행됨.

* 디자인 패턴에 대해 아는가?
> 생성패턴, 구조패턴, 행위패턴이 있습니다.
생성패턴은 팩토리패턴, 추상팩토리패턴, 빌더패턴, 싱글톤패턴 등이 있고
구조패턴은 어댑터패턴, 프록시패턴, 데코레이터 패턴, 퍼사드 패턴이 있고
행위 패턴은 전략패턴, 옵저버패턴, 커맨드 패턴이 있습니다.

* TDD를 해보았는지?
 > 실패코드 짜고-> 성공 코드 짜고-> 리펙토링 

* 스트링과 스트링 버퍼에 대한 차이
> 스트링은 불변객체로 재사용할 때 다시 메모리를 사용합니다.
> 스트링 버퍼는 처음 할당된 메모리에 계속해서 값을 추가할 수 있습니다.

* 자바 데이터타입 기본형에 대해 설명
> int, char, boolean flaot 등.. 스택에 저장됨.

* 스택 & 힙
> 스택: 기본형 타입 변수들과 그 값들이 함꼐 저장. 힙 영역에 저장되어 있는 참조형 타입 변수들의 reference가 저장된다. 정적인 것들이 저장됨
> 힙 : 참조형 타입의 변수들이 저장된다. New 연산자를 통해 생성된 인스턴스 변수가 저장된다. 동적인 것들이 저장됨.

* 접근제어자 종류와 특성에 대해 설명
 > public, private, protected
Public : 모든 패키지, 클래스 접근 가능
Protected: 같은 패키지 내 모든 클래스
Private : 같은 클래스

* 쓰레드 구현을 위한 인터페이스, 클래스는 무엇이 있음?
 > 인터페이스 : runnable, 클래스 thread

* static 키워드에 대해 설명
> static으로 선언하면 모든 인스턴스들이 공유할 수 있음.

* 자바 코드의 실행 과정을 알려주세요.
 1. JVM은 OS로부터 프로그램이 필요로 하는 메모리를 할당 받음
 2. 자바 컴파일러가 자바소스코드를 읽어들여 클래스로 변환시킴
 3. JVM은 클래스 로더를 통해 클래스 파일을 읽음
 4. 로딩 된 클래스 파일들은 execution engine을 통해 해석이 됨
 5. 해석된 클래스 파일은 runtime data areas에 배치되어 실행
 6. 이런 과정속에서 GC같은 작업을 실행..

* 오버로딩와 오버라이딩에 대해 설명
> 오버라이딩은 인터페이스 등에 상속받은 메소드를 정의할 때 사용하고, 오버로딩은 같은 메소드 이름에 다른 인자값을 받을 때 사용 합니다.

* JVM, JRE, JDK에 대해 설명
https://lisoft.tistory.com/20?category=978383
https://tecoble.techcourse.co.kr/post/2021-08-09-jvm-memory/
https://yaboong.github.io/java/2018/05/26/java-memory-management/
> JVM은 자바 클래스 코드를 실행하는 머신이고, JRE는 자바 코드 실행에 필요한 라이브러리들을 포함하고 있고, JDK는 JRE와 javac,java 등을 포함한 키트입니다.

* final 키워드 설명
> 불변의 의미. 

URI ,URL, URN?
URI > uniform resource identifier.
: URI 안에 URL과 URN이 있다.
URL : 리소스 로케이터. 리소스가 있는 위치를 지정.
URN : 리소스 네임
URL : 웹사이트에 적는 것을 URL이라고 한다.

Uniform : 리소스를 식별하는 통일된 방식. 
Resource : URI로 식별할 수 있는 모든 것.
Identifier : 다른 항목과 구분하는데 필요한 정보

* REST API에 대해 설명
 > REST 한 API를 REST API라고 합니다. 여기서 REST란, 웹의 장점을 최대한 활용할 수 있는 아키텍쳐의 집합이라고 할 수 있습니다. 이 아키텍쳐의 특징은 총 6가지가 있습니다.
1. Uniform interface, 2. Stateltess, 3. Cacheable, 4. Client- server, 5. Layered system 6. Code on demand입니다.
유니폼 인터페이스는 리소스가 URI로 식별이 되어야 하고, 메시지는 스스로 설명이 가능해야하고, 다른 상태로 전이가 가능해야 한다는 것을 의미합니다.
 Statless는 세션이나 쿠키정보를 관리하지 않는 것을 뜻합니다. Cachable은 캐싱 기능 적용이 가능하다는 의미로, HTTP 프로토콜 표준에서 사용하는 Last-Modified나 E-TAG등을 이용해서 구현할 수 있습니다. Self-descriptiveness는 api 메시지만 보고도 이를 쉽게 이해할 수 있는 자체 표현 구조로 되어 있다는 것입니다. Client-server는 클라이언트와 서버의 역할이 분리되어 있음을 의미합니다. Server는 api 제공, 클라이언트는 인증 등을 직접 관리합니다. 계층형 구조는 REST 서버는 다중 계층으로 구성될 수 있고, 보안, 로드밸런싱, 암호화 계층을 추가해 구조상 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워크 기반의 중간매체를 사용할 수 있게 합니다.
Code on demand는 서버에서 제공하는 code가 client에서 실행 되어야 함을 의미한다.
REST API 디자인에는 URI는 정보 자원을 표현하고, 행위는  HTTP METHOD로 표현합니다.


MSA에 대한 기본적인 지식
 > 독립적인 배포가 가능하고, API를 통해서 상호작용을 한다.
 
Domain Model에 대한 이해도
 > 도메인의 핵심을 간략하게 단순환해서 표현할 수 있는 모든 것..
https://brunch.co.kr/@myner/56

HTTP specification에 대한 전반적인 이해
> http는 서버 클라이언트 모델을 따라 데이터를 주고 받기 위한 프로토콜이다.
 http는 tcp/ip 위에서 작동한다.
 https는 http에 데이터 암호화가 추가된 프로토콜이다.


 * TCP/ HTTP의 차이
https://hwan-shell.tistory.com/271
>TCP 특징 : 연결지향적, 3way 4way 신뢰성, 순서보장
> HTTP는 이 모든 특징을 가지고 있다. TCP 기반으로 만들어져 있기 때문.
이 둘의 차이점은 단 하나이다.
정해진 규칙에 의거하여 클라이언트의 요청에 대한 정보를 제공해주고 연결을 끊을것이냐?
아니면 이런 규칙 없이 계속 연결을 유지할 것이냐?
프로토콜이 다르기 때문에 정의되는 헤더의 데이터 자체가 서로 다르다.

* HTTP란 무엇인가?
7계층에 속하는 프로토콜로, 클라이언트와 서버가 데이터를 어떤 형태로 주고 받을지를 결정하는 규약이다. Request, response, TCP/IP 위에 있고, stateless한 특징이 있다.

 * HTTP 프로토콜에 대한 설명	
> GET 조회, POST 데이터 처리, PUT 수정, DELETE 삭제

 * 전문통신, API 통신의 장단점
> 연결 지향, 비연결 지향의 차이. 전문통신은 소켓 통신으로 4계층 TCP/IP에서 진행되고 API 통신은 7계층 HTTP 프로토콜로 전달한다. 둘이 연결 지향적인게 중요하다면 전문통신을, 그게 아니라면 API 통신을 쓰면된다. 전문통신이 보통 더 빠르다.

 * DB Lock에 대한 개념 
https://chrisjune-13837.medium.com/db-lock-%EB%9D%BD%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-d908296d0279
> shared lock, exclusive lock이 있다. Shared는 읽기, exclusive는 데이터 변경 시 발생한다.
lock들의 경합으로 인해 블로킹이 발생할 수 있고, 이는 commit, rollback으로 처리한다. Dead lock은 트랜잭션간의 교착상태. 둘다 각각의 트랜잭션이 가지고 있는 리소스의 lcok을 획득하려고 할때 발생한다.
트러블슈팅
객체지향 SOLID
GC란?
나를 뽑아야 하는 이유가 있나?
나의 가장 큰 장점은?
가장 좋았던 프로젝트는 무엇이었나?
가장 안좋았던 프로젝튼느 무엇이었나?
MSA 해봄?
Nosql 해봄?
깃 써봄?
Seed 암호화는 대칭? 비대칭?
스프링 vs 스트러츠
스프링 IOC, DI 설명
디자인 패턴에 대한거 아는거
프록시 패턴은 스프링 어디에 쓰이는지?
요즘 관심사는 무엇인가?
트랜잭션에 대해서 아나?
RDBMS와 nosql의 차이는?
내가 너한테 일을 시켰을 떄 너에게 어려운 일이라혐ㄴ 어떻게 할건가?
MBTI?
디자인패턴

패턴 : 특정 컨텍스트 내에서 주어진 문제의 해결책

디자인원칙1. 애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분과 분리한다.
디자인원칙1. 구현보다는 인터페이스에 맞춰서 프로그래밍한다.
디자인원칙1. 상속보다는 구성을 활용한다.
디자인원칙1. 상호작용하는 객체 사이에서는 가능하면 느슨한 결합을 사용해야한다.
디자인원칙1. 클래스는 확장에는 여려 있어야 하지만 변경에는 닫혀 있어야 한다.
디자인원칙1. 추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.
디자인원칙1. 진짜 절친에게만 이야기 해야한다. 최소지식원칙
디자인원칙1. 먼저 연락하지 마세요. 저희가 연락드리겠습니다. 할리우드 원칙
디자인원칙1. 어떤 클래스가 바뀌는 이유는 하나뿐이어야 한다.

생성패턴은 팩토리패턴, 추상팩토리패턴, 빌더패턴, 싱글톤패턴
구조패턴은 어댑터패턴, 프록시패턴, 데코레이터 패턴, 퍼사드 패턴
행위 패턴은 전략패턴, 옵저버패턴, 커맨드 패턴

팩토리 메소드 패턴 
: 객체를 생성할 때 필요한 인터페이스를 만듭니다. 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정합니다. 팩토리 메소드를 사용하면 인스턴스 만드는 일을 서브클래스에 맡길 수 있습니다.

추상 팩토리 패턴 (피자집)
: 구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생성하는 인터페이스를 제공합니다. 구상 클래스는 서브클래스에서 만듭니다.
 
싱글턴 패턴
: 클래스 인스턴스를 하나만 만들고, 그 인스턴스로의 전역 접근을 제공합니다.


어댑터 패턴 ( enumeration -> iterator )
: 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환합니다. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있습니다.
 
프록시 패턴
: 특정 객체로의 접근을 제어하는 특정 객체를 대변하는 객체를 제공합니다.
 
데코레이터 패턴 (스타벅스)
: 객체에 추가 요소를 동적으로 더할 수 있는 패턴. 데코레이터를 사용하면 서브클래스를 만들 때보다 훨씬 유연하게 기능을 확장할 수 있습니다. (자바 I/O 는 데코레이터)

퍼사드 패턴 (홈시어터 켜기)
: 서브시스템에 있는 일련의 인터페이스를 통합 인터페이스로 묶어줍니다. 또한 고수준 인터페이스도 정의하므로 서브시스템을 더 편리하게 사용할 수 있습니다


전략패턴 (오리 시뮬레이션 게임)
 : 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해줍니다. 전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있습니다.

옵저버패턴 (기상청)
 : 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에게 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 정의합니다.

커맨드 패턴 (만능 리모컨)
 : 요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화 할 수 있습니다. 이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있습니다.


템플릿 메소드 패턴 (커피, 홍차 만들기) / (자바 Arrays)
: 알고리즘의 골격을 정의합니다. 템플릿 메소드를 사용하면 알고리즘의 일부 단계를 서브클래스에서 구현할 수 있으며, 알고리즘의 구조는 그대로 유지하면서 알고리즘의 특정 단계를 서브클래스에서 재정의할 수도 있습니다.

반복자 패턴 (식당 메뉴에 반복자 추가)
 : 컬렉션의 구현 방법을 노출하지 않으면서 집합체 내의 모든 항목에 접근하는 방법을 제공합니다.

컴포지트 패턴 (트리 구조)
 : 객체를 트리구조로 구성해서 부분-전체 계층 구조를 구현합니다. 컴포지트 패턴을 사용하면 클라이언트에서 개별 객체와 복합 객체를 똑같은 방법으로 다룰 수 있습니다.

상태 패턴 (뽑기 기계)
 : 객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있습니다. 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있습니다.


make
 : Java proxy api를 사용하여 트랜잭션 처리를 했음. Proxy.newProxyInstance를 사용하여 리플렉션으로 해당 클래스 가져와서 InvocationHandler를 사용하여 처리.

